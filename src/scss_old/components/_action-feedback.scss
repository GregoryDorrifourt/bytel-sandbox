.action-feedback {

    // Map this with usable buttons colors
    // $colors-list: (
    //     'default': $btn-secondary-bg,
    //     'primary': $brand-primary,
    //     'secondary': $btn-secondary-bg,
    //     'info': $brand-info,
    //     'warning': $brand-warning,
    //     'danger': $brand-danger,
    //     'success': $brand-success
    // );

    $colors-exceptions: (
            'default': $btn-secondary-bg,
            'light': $gray-800
        // 'secondary': $white
    );

    &.btn {

        color: transparent;
        position: relative;

        @each $theme, $color in $theme-colors {

            &.btn-#{$theme} {

                // Outline version
                &.btn-outline {
                    color: transparent;
                }

                &.btn-outline-#{$theme} {
                    // Higher specificity
                    &.btn:hover,
                    &.btn:focus,
                    &.btn {
                        color: transparent;
                    }

                    &::before {
                        color: $color;
                    }

                    &:focus,
                    &:hover {

                        &::before {
                            color: $white;
                        }
                    }
                }

                // Normal version
                &:focus,
                &:hover {

                    color: transparent;

                    &::before {

                        // color: $color;
                        font-weight: bold;
                    }
                }

                // Exception for this case
                @if(map-has-key($colors-exceptions, $theme)){

                    &.btn-#{$theme} {

                        &::before {
                            color: map-get($colors-exceptions, $theme);
                        }
                        &:focus,
                        &:hover {

                            &::before {
                                color: $white;
                            }
                        }
                    }

                }

            }
        }

    }
    // The spinner
    &::before {

        animation: spin 1.5s infinite ease;
        border-radius: 50%;
        color: $white;
        content: '';
        font-size: inherit;
        height: 1em;
        left: 0;
        margin: 0 auto;
        overflow: hidden;
        position: absolute;
        right: 0;
        top: 30%;
        transform: translateZ(0) translateY(-50%);
        width: 1em;
    }

    @keyframes spin {
        0% {

            box-shadow: 0 -0.83em 0 -0.4em,
            0 -0.83em 0 -0.42em,
            0 -0.83em 0 -0.44em,
            0 -0.83em 0 -0.46em,
            0 -0.83em 0 -0.477em;
            transform: rotate(0deg);
        }

        5%,
        95% {
            box-shadow: 0 -0.83em 0 -0.4em,
            0 -0.83em 0 -0.42em,
            0 -0.83em 0 -0.44em,
            0 -0.83em 0 -0.46em,
            0 -0.83em 0 -0.477em;
        }

        10%,
        59% {
            box-shadow: 0 -0.83em 0 -0.4em,
            -0.087em -0.825em 0 -0.42em,
            -0.173em -0.812em 0 -0.44em,
            -0.256em -0.789em 0 -0.46em,
            -0.297em -0.775em 0 -0.477em;
        }

        20% {
            box-shadow: 0 -0.83em 0 -0.4em,
            -0.338em -0.758em 0 -0.42em,
            -0.555em -0.617em 0 -0.44em,
            -0.671em -0.488em 0 -0.46em,
            -0.749em -0.34em 0 -0.477em;
        }

        38% {
            box-shadow: 0 -0.83em 0 -0.4em,
            -0.377em -0.74em 0 -0.42em,
            -0.645em -0.522em 0 -0.44em,
            -0.775em -0.297em 0 -0.46em,
            -0.82em -0.09em 0 -0.477em;
        }

        100% {

            box-shadow: 0 -0.83em 0 -0.4em,
            0 -0.83em 0 -0.42em,
            0 -0.83em 0 -0.44em,
            0 -0.83em 0 -0.46em,
            0 -0.83em 0 -0.477em;
            transform: rotate(360deg);
        }

    }
}
